package stats_views

import (
"fmt"
"github.com/gonext-tech/internal/models"
"github.com/gonext-tech/internal/views/layout"
)

var iconGreen = "fas fa-arrow-up text-green-500"
var iconRed = "fas fa-arrow-down text-red-500"
var textGreen = "text-green-500 font-semibold"
var textRed = "text-red-500 font-semibold"

templ StatsView(m models.Stats, pm models.Stats, yearly []models.Stats, params models.ParamResponse) {
@templ.JSONScript("chartData", yearly)
@templ.JSONScript("currentMonthData", m)
@templ.JSONScript("previousMonthData", pm)
<!-- Dashboard Cards -->
<div class="container mx-auto p-4 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
  <div class=" p-4 rounded-lg shadow-md flex flex-col space-y-2">
    <div class="flex items-center justify-between">
      <div class="flex items-center space-x-2">
        <i class="fas fa-dollar-sign text-green-500 text-2xl"></i>
        <h2 class="text-gray-500 font-semibold">Total Revenue</h2>
      </div>
      // we control this from JS
      <div id="revenue-card" class="text-sm flex items-center space-x-1"></div>
    </div>
    <p class="text-2xl font-bold">{ fmt.Sprintf("$%.2f",m.TotalRevenue) }</p>
  </div>
  <!-- Total Expenses Card -->
  <div class=" p-4 rounded-lg shadow-md flex flex-col space-y-2">
    <div class="flex items-center justify-between">
      <div class="flex items-center space-x-2">
        <i class="fas fa-file-invoice-dollar text-red-500 text-2xl"></i>
        <h2 class="text-gray-500 font-semibold">Total Expenses</h2>
      </div>
      // we control this from JS
      <div id="expenses-card" class="text-sm flex items-center space-x-1"></div>
    </div>
    <p class="text-2xl font-bold">{ fmt.Sprintf("$%.2f", m.TotalExpenses) }</p>
  </div>
  <!-- Total Subscriptions Card -->
  <div class=" p-4 rounded-lg shadow-md flex flex-col space-y-2">
    <div class="flex items-center justify-between">
      <div class="flex items-center space-x-2">
        <i class="fas fa-user-friends text-blue-500 text-2xl"></i>
        <h2 class="text-gray-500 font-semibold">Total Subscriptions</h2>
      </div>
      // we control this from JS
      <div id="subscriptions-card" class="text-sm flex items-center space-x-1"></div>
    </div>
    <p class="text-2xl font-bold">{ fmt.Sprintf("%d", m.TotalSubscriptions) }</p>
  </div>
  <!-- New Subscriptions Card -->
  <div class=" p-4 rounded-lg shadow-md flex flex-col space-y-2">
    <div class="flex items-center justify-between">
      <div class="flex items-center space-x-2">
        <i class="fas fa-user-plus text-purple-500 text-2xl"></i>
        <h2 class="text-gray-500 font-semibold">New Subscriptions</h2>
      </div>
      // we control this from JS
      <div id="new-subscriptions-card" class="text-sm flex items-center space-x-1"></div>
    </div>
    <p class="text-2xl font-bold">{ fmt.Sprintf("%d",m.NewSubscriptions) }</p>
  </div>
</div>
<!-- Charts Section -->
<div class="container mx-auto p-4 grid grid-cols-1 lg:grid-cols-2 gap-4">
  <!-- Revenue vs Expenses Bar Chart -->
  <div chart-data={ templ.JSONString(yearly) } id="chart-data" class=" p-4 rounded-lg shadow-md">
    <h2 class="text-gray-500 font-semibold mb-2">Revenue vs Expenses (Yearly)</h2>
    <canvas id="barChart"></canvas>
  </div>
  <!-- New Subscriptions by Month Pie Chart -->
  <div class=" p-4 rounded-lg shadow-md">
    <h2 class="text-gray-500 font-semibold mb-2">New Subscriptions by Month</h2>
    <canvas id="pieChart"></canvas>
  </div>
</div>
<script>
  // Data for Bar Chart (Revenue vs Expenses)
  const barChartCtx = document.getElementById('barChart').getContext('2d');
  const data = JSON.parse(document.getElementById('chartData').textContent);
  const currentMonth = JSON.parse(document.getElementById('currentMonthData').textContent);
  const previousMonth = JSON.parse(document.getElementById('previousMonthData').textContent);
  // Initialize arrays to store monthly data
  const monthlyExpenses = new Array(12).fill(0);
  const monthlyRevenue = new Array(12).fill(0);
  const monthlyNewSubscriptions = new Array(12).fill(0);

  // Populate arrays with values from dataaa
  data.forEach(item => {
    const monthIndex = item.Month - 1;  // Convert month to zero-based index
    monthlyExpenses[monthIndex] = item.TotalExpenses;
    monthlyRevenue[monthIndex] = item.TotalRevenue;
    monthlyNewSubscriptions[monthIndex] = item.NewSubscriptions;
  });

  new Chart(barChartCtx, {
    type: 'bar',
    data: {
      labels: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
      datasets: [
        {
          label: 'Revenue',
          data: monthlyRevenue,
          backgroundColor: 'rgba(75, 192, 192, 0.2)',
          borderColor: 'rgba(75, 192, 192, 1)',
          borderWidth: 1
        },
        {
          label: 'Expenses',
          data: monthlyExpenses,
          backgroundColor: 'rgba(255, 99, 132, 0.2)',
          borderColor: 'rgba(255, 99, 132, 1)',
          borderWidth: 1
        }
      ]
    },
    options: {
      responsive: true,
      scales: {
        y: {beginAtZero: true}
      }
    }
  });

  // Data for Pie Chart (New Subscriptions by Month)
  const pieChartCtx = document.getElementById('pieChart').getContext('2d');
  new Chart(pieChartCtx, {
    type: 'pie',
    data: {
      labels: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
      datasets: [{
        label: 'New Subscriptions',
        data: monthlyNewSubscriptions,
        backgroundColor: [
          '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF',
          '#FF9F40', '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0',
          '#9966FF', '#FF9F40'
        ]
      }]
    },
    options: {
      responsive: true
    }
  });

  function calculatePercentageChange(oldValue, newValue) {
    if (oldValue === 0) {
      return newValue > 0 ? 100 : 0; // 100% increase if oldValue is 0, 0% otherwise
    }
    return ((newValue - oldValue) / oldValue) * 100;
  }

  function updateStatistics(prevData, currData) {
    console.log("prevvDataa", prevData)
    const stats = {
      revenue: calculatePercentageChange(prevData.TotalRevenue, currData.TotalRevenue),
      expenses: calculatePercentageChange(prevData.TotalExpenses, currData.TotalExpenses),
      subscriptions: calculatePercentageChange(prevData.TotalSubscriptions, currData.TotalSubscriptions),
      newSubscriptions: calculatePercentageChange(prevData.NewSubscriptions, currData.NewSubscriptions),
    };

    formatCard(stats.revenue, "revenue-card");
    formatCard(stats.expenses, "expenses-card");
    formatCard(stats.subscriptions, "subscriptions-card");
    formatCard(stats.newSubscriptions, "new-subscriptions-card");
  }

  function formatCard(value, cardId) {
    const isPositive = value >= 0;
    const arrowIcon = isPositive ? "fa-arrow-up" : "fa-arrow-down";
    const colorClass = isPositive ? "text-green-500" : "text-red-500";
    const formattedValue = Math.abs(value).toFixed(2) + "%";

    const cardElement = document.getElementById(cardId);

    // Create and style the icon element
    const iconElement = document.createElement("i");
    iconElement.classList.add("fas", arrowIcon, colorClass)
    const valueElement = document.createElement("p");
    valueElement.textContent = formattedValue;
    valueElement.classList.add("font-bold", colorClass)


    // Append both elements to the card container
    cardElement.appendChild(iconElement);
    cardElement.appendChild(valueElement);
  }
  updateStatistics(previousMonth, currentMonth);
</script>
}

templ Index(
title,
email string,
fromProtected bool,
isError bool,
errMsgs, sucMsgs []string,
cmp templ.Component,
) {
@layout.Base(title, email, fromProtected, isError, errMsgs, sucMsgs) {
@cmp
}
}
